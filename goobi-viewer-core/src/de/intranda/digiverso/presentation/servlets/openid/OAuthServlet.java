/**
 * This file is part of the Goobi viewer - a content presentation and management application for digitized objects.
 *
 * Visit these websites for more information.
 *          - http://www.intranda.com
 *          - http://digiverso.com
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package de.intranda.digiverso.presentation.servlets.openid;

import java.io.IOException;
import java.nio.charset.Charset;
import java.util.Date;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.lang.StringUtils;
import org.apache.oltu.oauth2.client.OAuthClient;
import org.apache.oltu.oauth2.client.URLConnectionClient;
import org.apache.oltu.oauth2.client.request.OAuthBearerClientRequest;
import org.apache.oltu.oauth2.client.request.OAuthClientRequest;
import org.apache.oltu.oauth2.client.response.GitHubTokenResponse;
import org.apache.oltu.oauth2.client.response.OAuthAccessTokenResponse;
import org.apache.oltu.oauth2.client.response.OAuthAuthzResponse;
import org.apache.oltu.oauth2.client.response.OAuthResourceResponse;
import org.apache.oltu.oauth2.client.validator.TokenValidator;
import org.apache.oltu.oauth2.common.OAuth;
import org.apache.oltu.oauth2.common.OAuthProviderType;
import org.apache.oltu.oauth2.common.exception.OAuthProblemException;
import org.apache.oltu.oauth2.common.exception.OAuthSystemException;
import org.apache.oltu.oauth2.common.message.types.GrantType;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import de.intranda.digiverso.presentation.controller.DataManager;
import de.intranda.digiverso.presentation.exceptions.DAOException;
import de.intranda.digiverso.presentation.exceptions.IndexUnreachableException;
import de.intranda.digiverso.presentation.exceptions.PresentationException;
import de.intranda.digiverso.presentation.managedbeans.UserBean;
import de.intranda.digiverso.presentation.managedbeans.utils.BeanUtils;
import de.intranda.digiverso.presentation.model.search.SearchHelper;
import de.intranda.digiverso.presentation.model.security.user.User;
import de.intranda.digiverso.presentation.servlets.utils.ServletUtils;

/**
 * OpenID Connect business logic.
 */
public class OAuthServlet extends HttpServlet {

    private static final long serialVersionUID = 6279885446798463881L;

    private static final Logger logger = LoggerFactory.getLogger(OAuthServlet.class);

    public static final String URL = "oauth";

    /**
     * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        doPost(request, response);
    }

    /**
     * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        UserBean ub = BeanUtils.getUserBean();
        if (ub == null) {
            logger.error("Could not retrieve UserBean.");
            response.sendRedirect(ServletUtils.getServletPathWithHostAsUrlFromRequest(request) + "/user/");
            return;
        }

        // Apache Oltu
        try {
            OAuthAuthzResponse oar = OAuthAuthzResponse.oauthCodeAuthzResponse(request);
            // Confirm that the state received from the provider matches the state generated by the viewer
            if (ub.getoAuthState() == null || !oar.getState().equals(ub.getoAuthState())) {
                logger.error("Received invalid state token.");
                response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Received invalid state token.");
            }

            // Send access token request (Google)
            String email = null;
            String sub = null;
            OAuthClientRequest oAuthTokenRequest = null;
            switch (ub.getOpenIdProvider().getName().toLowerCase()) {
                case "google":
                    oAuthTokenRequest = OAuthClientRequest.tokenProvider(OAuthProviderType.GOOGLE).setGrantType(GrantType.AUTHORIZATION_CODE)
                            .setClientId(ub.getOpenIdProvider().getClientId()).setClientSecret(ub.getOpenIdProvider().getClientSecret())
                            .setRedirectURI(ServletUtils.getServletPathWithHostAsUrlFromRequest(request) + "/" + URL).setCode(oar.getCode())
                            .buildBodyMessage(); {
                    OAuthClient oAuthClient = new OAuthClient(new URLConnectionClient());
                    OAuthAccessTokenResponse oAuthTokenResponse = oAuthClient.accessToken(oAuthTokenRequest);
                    if (oAuthTokenResponse != null) {
                        TokenValidator tv = new TokenValidator();
                        tv.validate(oAuthTokenResponse);
                        ub.setoAuthAccessToken(oAuthTokenResponse.getAccessToken());
                        String idTokenEncoded = (oAuthTokenResponse.getParam("id_token"));
                        String[] idTokenEncodedSplit = idTokenEncoded.split("[.]");
                        if (idTokenEncodedSplit.length != 3) {
                            logger.error("Wrong number of segments in id_token. Expected 3, found " + idTokenEncodedSplit.length);
                            break;
                        }
                        // String header = new String(new Base64(true).decode(idTokenEncodedSplit[0]), Charset.forName("UTF-8"));
                        String payload = new String(new Base64(true).decode(idTokenEncodedSplit[1]), Charset.forName("UTF-8"));
                        // String signature = idTokenEncodedSplit[2];
                        JSONObject jsonPayload = (JSONObject) new JSONParser().parse(payload);

                        // Validate id_token
                        String iss = (String) jsonPayload.get("iss");
                        if (!"accounts.google.com".equals(iss)) {
                            logger.error("Google id_token validation failed - 'iss' value: " + iss);
                            break;
                        }
                        String aud = (String) jsonPayload.get("aud");
                        if (!ub.getOpenIdProvider().getClientId().equals(aud)) {
                            logger.error("Google id_token validation failed - 'aud' value: " + aud);
                            break;
                        }
                        email = (String) jsonPayload.get("email");
                        sub = (String) jsonPayload.get("sub");
                    }
                }
                    break;
                case "facebook":
                    oAuthTokenRequest = OAuthClientRequest.tokenProvider(OAuthProviderType.FACEBOOK).setGrantType(GrantType.AUTHORIZATION_CODE)
                            .setClientId(ub.getOpenIdProvider().getClientId()).setClientSecret(ub.getOpenIdProvider().getClientSecret())
                            .setRedirectURI(ServletUtils.getServletPathWithHostAsUrlFromRequest(request) + "/" + URL).setCode(oar.getCode())
                            .buildQueryMessage(); {
                    OAuthClient oAuthClient = new OAuthClient(new URLConnectionClient());
                    OAuthAccessTokenResponse oAuthTokenResponse = oAuthClient.accessToken(oAuthTokenRequest, GitHubTokenResponse.class);
                    if (oAuthTokenResponse != null) {
                        TokenValidator tv = new TokenValidator();
                        tv.validate(oAuthTokenResponse);
                        ub.setoAuthAccessToken(oAuthTokenResponse.getAccessToken());

                        // Retrieve resources
                        OAuthClientRequest bearerClientRequest = new OAuthBearerClientRequest("https://graph.facebook.com/me").setAccessToken(
                                oAuthTokenResponse.getAccessToken()).buildQueryMessage();
                        OAuthResourceResponse resourceResponse = oAuthClient.resource(bearerClientRequest, OAuth.HttpMethod.GET,
                                OAuthResourceResponse.class);
                        if (resourceResponse != null) {
                            // logger.debug(resourceResponse.getBody());
                            JSONObject jsonProfile = (JSONObject) new JSONParser().parse(resourceResponse.getBody());
                            email = (String) jsonProfile.get("email");
                            sub = (String) jsonProfile.get("id");
                        }
                    }
                }
                    break;
                default:
                    // Other providers
                    oAuthTokenRequest = OAuthClientRequest.tokenLocation(ub.getOpenIdProvider().getUrl() + "/access_token").setGrantType(
                            GrantType.AUTHORIZATION_CODE).setClientId(ub.getOpenIdProvider().getClientId()).setClientSecret(ub.getOpenIdProvider()
                                    .getClientSecret()).setRedirectURI(ServletUtils.getServletPathWithHostAsUrlFromRequest(request) + "/" + URL)
                            .setCode(oar.getCode()).buildBodyMessage(); {
                    OAuthClient oAuthClient = new OAuthClient(new URLConnectionClient());
                    oAuthClient.accessToken(oAuthTokenRequest);
                }
            }

            if (email != null) {
                User user = null;
                String comboSub = ub.getOpenIdProvider().getName().toLowerCase() + ":" + sub;
                // Retrieve user by sub
                if (sub != null) {
                    user = DataManager.getInstance().getDao().getUserByOpenId(comboSub);
                    if (user != null) {
                        logger.debug("Found user {} via OAuth sub '{}'.", user.getId(), comboSub);
                    }
                }
                // If not found, try email
                if (user == null) {
                    user = DataManager.getInstance().getDao().getUserByEmail(email);
                    if (user != null && sub != null) {
                        user.getOpenIdAccounts().add(comboSub);
                        logger.info("Updated user {} - added OAuth sub '{}'.", user.getId(), comboSub);
                    }
                }
                // If still not found, create a new user
                if (user == null) {
                    user = new User();
                    user.setActive(true);
                    user.setEmail(email);
                    if (sub != null) {
                        user.getOpenIdAccounts().add(sub);
                    }
                    logger.debug("Created new user.");
                }
                // Add to bean and persist
                user.setLastLogin(new Date());
                if (user.getId() == null) {
                    if (!DataManager.getInstance().getDao().addUser(user)) {
                        logger.error("Could not add user to DB.");
                    }
                } else {
                    if (!DataManager.getInstance().getDao().updateUser(user)) {
                        logger.error("Could not update user in DB.");
                    }
                }
                DataManager.getInstance().getBookshelfManager().addSessionBookshelfToUser(user, request);
                UserBean.wipeSession(request);
                ub.setUser(user);
                request.getSession().setAttribute("user", user);
                SearchHelper.updateFilterQuerySuffix(request);

                // If a redirect URL is set, redirect there
                if (StringUtils.isNotEmpty(ub.getRedirectUrl())) {
                    logger.debug("Redirecting to " + ub.getRedirectUrl());
                    try {
                        response.sendRedirect(ub.getRedirectUrl());
                        return;
                    } finally {
                        ub.setRedirectUrl(null);
                    }
                }
            } else {
                //                response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "OpenID Connect login failed");
            }
        } catch (OAuthProblemException e) {
            if (e.getMessage().startsWith("access_denied")) {
                logger.debug("User aborted login");
            } else {
                logger.error(e.getMessage(), e);
            }
        } catch (OAuthSystemException | ParseException e) {
            logger.error(e.getMessage(), e);
            //            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "OpenID Connect login failed");
        } catch (DAOException e) {
            logger.debug("DAOException thrown here: {}", e.getMessage());
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Database offline");
            return;
        } catch (IndexUnreachableException e) {
            logger.debug("IndexUnreachableException thrown here: {}", e.getMessage());
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Index offline");
            return;
        } catch (PresentationException e) {
            logger.debug("PresentationException thrown here: {}", e.getMessage());
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Internal error");
            return;
        }

        response.sendRedirect(ServletUtils.getServletPathWithHostAsUrlFromRequest(request) + "/user/");
    }
}